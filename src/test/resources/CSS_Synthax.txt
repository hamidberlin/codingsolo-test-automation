🟩 Grundlegende Selektoren

Selektor			Beschreibung						Beispiel

*					Wählt alle Elemente					* { margin: 0; }
element				Wählt alle Elemente dieses Typs		p { color: red; }
#id					Wählt ein Element nach ID			#header { font-size: 20px; }
.class				Wählt Elemente nach Klasse			.btn { background: blue; }
🟨 Kombinatoren

Selektor			Beschreibung						Beispiel

A B					Nachfahrenselektor (A → B)			div p { color: green; }
A > B				Kindselektor (direkt)				div > p { color: blue; }
A + B				Adjazentselektor					h1 + p { margin-top: 10px; }
A ~ B				Geschwisterselektor					h1 ~ p { color: gray; }
🟠 Attributselektoren

Selektor			Beschreibung						Beispiel

[attribut]			Attribut vorhanden					[disabled] { opacity: 0.5; }
[attribut="wert"]	Genauer Wert						[type="text"] { color: black; }
[attribut~="wert"]	Enthält Wort						[class~="btn"] { padding: 10px; }
[attribut^="wert"]	Startet mit							[href^="https"] { color: green; }
[attribut$="wert"]	Endet mit	[						src$=".jpg"] { border: 1px solid; }
[attribut*="wert"]	Enthält Zeichenkette				[title*="Info"] { font-weight: bold; }
🟢 Pseudoklassen

Selektor			Beschreibung						Beispiel

:first-child		Erstes Kind							li:first-child { color: red; }
:last-child			Letztes Kind						li:last-child { color: blue; }
:nth-child(n)		Bestimmtes Kind						li:nth-child(2) { font-weight: bold; }
:hover				Hover-Effekt						a:hover { text-decoration: underline; }
:focus				Fokussiertes Element				input:focus { outline: none; }
:not(selector)		Negation							button:not(.disabled) { background: green; }
🟣 Pseudoelemente

Selektor			Beschreibung						Beispiel

::before			Fügt Inhalt vor dem Element hinzu	p::before { content: "✨ "; }
::after				Fügt Inhalt nach dem Element hinzu	p::after { content: " 🚀"; }
::first-letter		Stylt den ersten Buchstaben			p::first-letter { color: red; }
📘 Beispiel in Aktion
/* Allgemeine Styles */
body {
    font-family: Arial, sans-serif;
}

h1:hover {
    color: purple;
}

ul > li:first-child {
    font-weight: bold;
}

a[href^="https"] {
    color: green;
}

input:focus {
    border: 2px solid blue;
}


Was sind Kombinatoren?
Ein Kombinator ist ein Symbol, das beschreibt, wie zwei CSS-Selektoren miteinander in Beziehung stehen.

🟩 1. Nachfahrenselektor ( - Leerzeichen)
Wählt alle Nachfahren eines Elements (egal, wie tief verschachtelt)
div p {
    color: blue;
}
🔸 Beispiel: Alle <p>-Elemente innerhalb eines <div> werden blau — egal, wie tief sie eingebettet sind!
<div>
    <p>Ich werde blau!</p>
    <section>
        <p>Ich auch, obwohl ich tiefer liege!</p>
    </section>
</div>
🟨 2. Kindselektor (>)
Wählt nur direkte Kinder eines Elements
div > p {
    color: red;
}
🔸 Beispiel: Nur die direkten <p>-Elemente im <div> werden rot:
<div>
    <p>Ich werde rot!</p>
    <section>
        <p>Ich nicht, weil ich kein direktes Kind bin!</p>
    </section>
</div>
🟠 3. Adjazentselektor (+)
Wählt das nächste Geschwisterelement
h1 + p {
    font-size: 20px;
}
🔸 Beispiel: Der erste <p> nach einem <h1> bekommt eine größere Schriftgröße:
<h1>Überschrift</h1>
<p>Direkt daneben! Ich werde größer.</p>
<p>Ich nicht, weil ich nicht direkt daneben bin.</p>
🟢 4. Geschwisterselektor (~)
Wählt alle nachfolgenden Geschwisterelemente
h1 ~ p {
    color: green;
}
🔸 Beispiel: Alle <p>-Elemente nach einem <h1> werden grün:
<h1>Überschrift</h1>
<p>Ich werde grün!</p>
<p>Ich auch!</p>
🧠 Zusammenfassung:
Selektor	Beschreibung			Beispiel
A B			Wählt alle Nachfahren von A	div p
A > B		Wählt direkte Kinder von A	div > p
A + B		Wählt das nächste Geschwisterelement	h1 + p
A ~ B		Wählt alle Geschwisterelemente nach A	h1 ~ p
Kombinatoren sind supermächtig, wenn du gezielt Elemente in einer komplexen HTML-Struktur stylen möchtest — ganz ohne zusätzliche Klassen oder IDs. 🎯

In der Tabelle sind A und B Platzhalter für HTML-Elemente. Sie zeigen an, wie diese beiden Elemente zueinander in Beziehung stehen.

Ich erkläre es dir klarer:

🟩 A B (Nachfahrenselektor)
➡️ B ist ein Nachfahre von A, egal wie tief verschachtelt.
div p {
    color: blue;
}
🔸 Bedeutung: Jedes <p>-Element innerhalb eines <div> wird blau.
🔸 Egal wie tief verschachtelt das <p> ist!
<div>
    <p>Ich werde blau!</p>
    <section>
        <p>Ich auch, obwohl ich tiefer liege!</p>
    </section>
</div>
➡️ Beide <p>-Elemente werden blau, weil sie Nachfahren von <div> sind.

🟨 A > B (Kindselektor)
➡️ B ist ein direktes Kind von A.
div > p {
    color: red;
}
🔸 Bedeutung: Nur <p>-Elemente, die direkt im <div> liegen, werden rot.
<div>
    <p>Ich werde rot!</p>
    <section>
        <p>Ich nicht, weil ich kein direktes Kind bin!</p>
    </section>
</div>
➡️ Nur das erste <p> wird rot, weil es ein direktes Kind von <div> ist.
➡️ Das zweite <p> ist kein direktes Kind, weil es in <section> liegt.

🔑 Unterschied zusammengefasst:
Selektor				Bedeutung							Treffer
A B						Alle Nachfahren (egal wie tief)		Alle Kindelemente und Enkelkinder
A > B					Nur direkte Kinder					Nur direkt verschachtelte Elemente


Reguläre Ausdrücke (Regex)
Reguläre Ausdrücke sind Muster, die zum Suchen und Manipulieren von Text verwendet werden. In XPath und CSS-Selektoren können sie helfen, gezielt Elemente auszuwählen, die bestimmten Textmustern entsprechen.

🟢 XPath mit regulären Ausdrücken
In XPath kannst du die Funktion contains(), starts-with(), oder sogar
//div[contains(@class, 'button')]
➡️ Findet alle <div>-Elemente, deren class-Attribut das Wort button enthält.

🔸 Mit matches() für Regex (XPath 2.0+):

//input[matches(@name, '^user.*')]
➡️ Findet alle <input>-Elemente, bei denen der name mit „user“ beginnt.

🟡 CSS-Selektoren mit partiellen Übereinstimmungen
CSS-Selektoren unterstützen keine vollen regulären Ausdrücke, aber sie haben ähnliche Syntax für Teilvergleiche:

^= → beginnt mit
input[name^="user"]
➡️ Wählt <input>-Felder aus, deren name mit "user" beginnt.

$= → endet mit
a[href$=".pdf"]
➡️ Wählt <a>-Links aus, die auf .pdf enden.

*= → enthält
div[class*="error"]
➡️ Wählt <div>-Elemente aus, deren class das Wort „error“ irgendwo enthält.

📊 XPath vs. CSS-Selektoren: Regex-Fähigkeiten
XPath	CSS-Selektoren
Regex-Unterstützung	✅ Vollständig (matches())	❌ Keine echte Regex
Teilstringsuche	✅ contains() & starts-with()	✅ *=, ^=, $=
Leistungsfähigkeit	🟡 Flexibler, aber langsamer	🟢 Schneller, aber eingeschränkt
Wenn du komplexe Textmuster brauchst (z. B. E-Mail-Adressen), ist XPath mit matches() unschlagbar. Für einfache Teilvergleiche sind CSS-Selektoren schneller.

